# Generated by Django 5.2.3 on 2025-06-17 13:05

import django.contrib.auth.validators
import django.utils.timezone
import ft.user.managers.UserManager
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                ("last_name", models.CharField(max_length=150, verbose_name="Nom")),
                ("first_name", models.CharField(max_length=150, verbose_name="Prénom")),
                (
                    "address",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="Adresse"
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Ville"
                    ),
                ),
                (
                    "zip_code",
                    models.CharField(
                        blank=True, max_length=10, null=True, verbose_name="Code postal"
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Pays"
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        help_text="Numéro de téléphone de l'utilisateur",
                        max_length=14,
                        null=True,
                        verbose_name="Numéro de téléphone",
                    ),
                ),
                (
                    "birth_date",
                    models.DateField(
                        blank=True,
                        help_text="Date de naissance de l'utilisateur (format: JJ/MM/AAAA)",
                        null=True,
                        verbose_name="Date de naissance",
                    ),
                ),
                (
                    "has_car",
                    models.BooleanField(
                        default=False,
                        help_text="Si vous avez un véhicule pour transporter des personnes.",
                        verbose_name="A un véhicule",
                    ),
                ),
                (
                    "car_seats",
                    models.PositiveSmallIntegerField(
                        default=1,
                        help_text="Nombre de places disponibles (conducteur inclus)",
                        verbose_name="Nombre de places dans le véhicule",
                    ),
                ),
                (
                    "can_host_peoples",
                    models.BooleanField(
                        default=False,
                        help_text="Si vous avez un domicile avec des lits disponibles.",
                        verbose_name="Peut accueillir des personnes",
                    ),
                ),
                (
                    "home_available_beds",
                    models.PositiveSmallIntegerField(
                        default=1,
                        help_text="Nombre de lits disponibles pour les personnes hébergées",
                        verbose_name="Nombre de lits disponibles",
                    ),
                ),
                (
                    "home_rules",
                    models.TextField(
                        blank=True,
                        help_text="Ex: Allergies, horraires, etc.",
                        null=True,
                        verbose_name="Règles du domicile",
                    ),
                ),
                (
                    "faluche_nickname",
                    models.CharField(
                        blank=True,
                        help_text="Surnom de Faluche de l'utilisateur",
                        max_length=150,
                        null=True,
                        verbose_name="Surnom de Fal",
                    ),
                ),
                (
                    "faluche_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("SYMPATHISANT", "Sympathisant"),
                            ("IMPETRANT", "Impétrant"),
                            ("BAPTISE", "Baptisé"),
                            ("OTHER", "Autre folklore"),
                        ],
                        help_text="Statut de Faluche de l'utilisateur",
                        max_length=20,
                        null=True,
                        verbose_name="Statut de Faluche",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "ordering": ["last_name", "first_name"],
            },
            managers=[
                ("objects", ft.user.managers.UserManager()),
            ],
        ),
    ]
